✅ npm init -y
    What it does:
        Initializes a new Node.js project by creating a package.json file with default values.

    Why we use it:
        package.json keeps track of your project's metadata, scripts, and dependencies (like express,
        nodemon, etc.), making it easier to manage and share your project.

✅ npm install express
    What it does:
        Installs Express, a minimal and flexible web application framework for Node.js.

    Why we use it:
        Express allows you to easily set up routes, handle HTTP requests, build APIs, 
        and manage middleware. It's the backbone of most Node.js web servers.

✅ npm install nodemon
    What it does:
        Installs Nodemon, a tool that automatically restarts your server whenever you change your code.

    Why we use it:
        You don't have to stop and restart the server manually every time you make a change. 
        Nodemon watches for file changes and reloads automatically, speeding up development.

✅ npm install body-parser
    What it does:
        Installs body-parser, a middleware that parses incoming request bodies (e.g., form data or JSON).

    Why we use it:
        When a client sends data (like JSON from a form or a POST request), body-parser makes 
        that data available in req.body so you can easily access and use it in your code.

✅ npm install mongoose
    What it does:
        Installs Mongoose, a library that helps you interact with a MongoDB database using JavaScript 
        objects.

    Why we use it:
        Mongoose allows you to define the structure of your data using schemas, and provides 
        easy-to-use methods to perform database operations like saving, updating, deleting, and 
        retrieving data. It simplifies working with MongoDB and adds features like data validation 
        and middleware support.